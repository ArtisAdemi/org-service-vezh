{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/o/{orgId}/members": {
            "get": {
                "description": "Validates user is, will query DB the orgs that current user is linked to and then returns them in JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orgs"
                ],
                "summary": "GetOrgMembers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OrgID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/org.OrgMembersResponse"
                        }
                    }
                }
            }
        },
        "/api/o/{orgId}/users/invite/{email}/{roleId}": {
            "get": {
                "description": "Validates email, role ID in request, checks in DB if req email exists with req orgId, if not generates a JWT token, send via email a UI app URL containing the token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "InviteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OrgID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "RoleID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.StatusResponse"
                        }
                    }
                }
            }
        },
        "/api/orgs": {
            "post": {
                "description": "Validates user id, org name and org size, checks if org exists in DB by name or slug, if not a new organization with trial subscription will be created and then the created ID will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orgs"
                ],
                "summary": "Add Org",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "AddOrgRequest",
                        "name": "AddOrgRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/org.AddOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/org.OrgResponse"
                        }
                    }
                }
            }
        },
        "/api/orgs/me": {
            "get": {
                "description": "Validates user is, will query DB the orgs that current user is linked to and then returns them in JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orgs"
                ],
                "summary": "FindMyOrgs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/org.OrgWithRole"
                            }
                        }
                    }
                }
            }
        },
        "/api/users/invite/accept/{token}": {
            "post": {
                "description": "Validates token, username, firstName, lastName, password and confirmPassword, then check in DB if user with same email and org is already connected if not creates User, Profile and Org Relationship and returns created user ID in response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "InviteAccept",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AcceptInvitationRequest",
                        "name": "AcceptInvitationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.AcceptInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.AcceptInvitationResponse"
                        }
                    }
                }
            }
        },
        "/o/{orgId}/users/change-user-role": {
            "put": {
                "description": "Validates org id and user id, and new role id, will query DB in users for user by user id, then tries to change the role from admin to owner or vice-versa.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "ChangeUserRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Org ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ChangeUserRoleRequest",
                        "name": "ChangeUserRoleRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.ChangeUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.StatusResponse"
                        }
                    }
                }
            }
        },
        "/o/{orgId}/users/change-user-status": {
            "put": {
                "description": "Validates org id and user id, and status, will try to find user by user id, then tries to change the status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "ChangeUserStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Org ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ChangeUserStatusRequest",
                        "name": "ChangeUserStatusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.ChangeUserStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.StatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "org.AddOrgRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "org.OrgMembers": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/org.UserResponse"
                },
                "userOrgRole": {
                    "$ref": "#/definitions/org.UserOrgRoleResponse"
                }
            }
        },
        "org.OrgMembersResponse": {
            "type": "object",
            "properties": {
                "orgMembers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/org.OrgMembers"
                    }
                }
            }
        },
        "org.OrgResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "org.OrgWithRole": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "org.UserOrgRoleResponse": {
            "type": "object",
            "properties": {
                "orgId": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "org.UserResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "avatarImgKey": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.AcceptInvitationRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.AcceptInvitationResponse": {
            "type": "object",
            "properties": {
                "inviteAccepted": {
                    "type": "boolean"
                },
                "orgSlug": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "users.ChangeUserRoleRequest": {
            "type": "object",
            "properties": {
                "newRoleId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "users.ChangeUserStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "users.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        }
    }
}